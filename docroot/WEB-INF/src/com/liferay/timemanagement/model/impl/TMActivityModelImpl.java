/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.timemanagement.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.timemanagement.model.TMActivity;
import com.liferay.timemanagement.model.TMActivityModel;
import com.liferay.timemanagement.model.TMActivitySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the TMActivity service. Represents a row in the &quot;timemanagement_TMActivity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.timemanagement.model.TMActivityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TMActivityImpl}.
 * </p>
 *
 * @author Istvan Sajtos, Zsolt Szabo
 * @see TMActivityImpl
 * @see com.liferay.timemanagement.model.TMActivity
 * @see com.liferay.timemanagement.model.TMActivityModel
 * @generated
 */
@JSON(strict = true)
public class TMActivityModelImpl extends BaseModelImpl<TMActivity>
	implements TMActivityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a t m activity model instance should use the {@link com.liferay.timemanagement.model.TMActivity} interface instead.
	 */
	public static final String TABLE_NAME = "timemanagement_TMActivity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "activityId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "activityName", Types.VARCHAR },
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT },
			{ "classUuid", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "endDate", Types.TIMESTAMP },
			{ "priority", Types.INTEGER },
			{ "reminderDate", Types.TIMESTAMP },
			{ "scheduledDate", Types.TIMESTAMP },
			{ "startDate", Types.TIMESTAMP },
			{ "visible", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table timemanagement_TMActivity (activityId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,activityName STRING null,classNameId LONG,classPK LONG,classUuid VARCHAR(75) null,description STRING null,endDate DATE null,priority INTEGER,reminderDate DATE null,scheduledDate DATE null,startDate DATE null,visible BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table timemanagement_TMActivity";
	public static final String ORDER_BY_JPQL = " ORDER BY tmActivity.activityName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY timemanagement_TMActivity.activityName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.timemanagement.model.TMActivity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.timemanagement.model.TMActivity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.timemanagement.model.TMActivity"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long ACTIVITYNAME_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TMActivity toModel(TMActivitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TMActivity model = new TMActivityImpl();

		model.setActivityId(soapModel.getActivityId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setActivityName(soapModel.getActivityName());
		model.setClassNameId(soapModel.getClassNameId());
		model.setClassPK(soapModel.getClassPK());
		model.setClassUuid(soapModel.getClassUuid());
		model.setDescription(soapModel.getDescription());
		model.setEndDate(soapModel.getEndDate());
		model.setPriority(soapModel.getPriority());
		model.setReminderDate(soapModel.getReminderDate());
		model.setScheduledDate(soapModel.getScheduledDate());
		model.setStartDate(soapModel.getStartDate());
		model.setVisible(soapModel.getVisible());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TMActivity> toModels(TMActivitySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TMActivity> models = new ArrayList<TMActivity>(soapModels.length);

		for (TMActivitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.timemanagement.model.TMActivity"));

	public TMActivityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _activityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setActivityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _activityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TMActivity.class;
	}

	@Override
	public String getModelClassName() {
		return TMActivity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("activityId", getActivityId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("activityName", getActivityName());
		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());
		attributes.put("classUuid", getClassUuid());
		attributes.put("description", getDescription());
		attributes.put("endDate", getEndDate());
		attributes.put("priority", getPriority());
		attributes.put("reminderDate", getReminderDate());
		attributes.put("scheduledDate", getScheduledDate());
		attributes.put("startDate", getStartDate());
		attributes.put("visible", getVisible());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long activityId = (Long)attributes.get("activityId");

		if (activityId != null) {
			setActivityId(activityId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String activityName = (String)attributes.get("activityName");

		if (activityName != null) {
			setActivityName(activityName);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		String classUuid = (String)attributes.get("classUuid");

		if (classUuid != null) {
			setClassUuid(classUuid);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Integer priority = (Integer)attributes.get("priority");

		if (priority != null) {
			setPriority(priority);
		}

		Date reminderDate = (Date)attributes.get("reminderDate");

		if (reminderDate != null) {
			setReminderDate(reminderDate);
		}

		Date scheduledDate = (Date)attributes.get("scheduledDate");

		if (scheduledDate != null) {
			setScheduledDate(scheduledDate);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Boolean visible = (Boolean)attributes.get("visible");

		if (visible != null) {
			setVisible(visible);
		}
	}

	@JSON
	@Override
	public long getActivityId() {
		return _activityId;
	}

	@Override
	public void setActivityId(long activityId) {
		_activityId = activityId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getActivityName() {
		if (_activityName == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityName;
		}
	}

	@Override
	public String getActivityName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getActivityName(languageId);
	}

	@Override
	public String getActivityName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getActivityName(languageId, useDefault);
	}

	@Override
	public String getActivityName(String languageId) {
		return LocalizationUtil.getLocalization(getActivityName(), languageId);
	}

	@Override
	public String getActivityName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getActivityName(), languageId,
			useDefault);
	}

	@Override
	public String getActivityNameCurrentLanguageId() {
		return _activityNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getActivityNameCurrentValue() {
		Locale locale = getLocale(_activityNameCurrentLanguageId);

		return getActivityName(locale);
	}

	@Override
	public Map<Locale, String> getActivityNameMap() {
		return LocalizationUtil.getLocalizationMap(getActivityName());
	}

	@Override
	public void setActivityName(String activityName) {
		_columnBitmask = -1L;

		_activityName = activityName;
	}

	@Override
	public void setActivityName(String activityName, Locale locale) {
		setActivityName(activityName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setActivityName(String activityName, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(activityName)) {
			setActivityName(LocalizationUtil.updateLocalization(
					getActivityName(), "ActivityName", activityName,
					languageId, defaultLanguageId));
		}
		else {
			setActivityName(LocalizationUtil.removeLocalization(
					getActivityName(), "ActivityName", languageId));
		}
	}

	@Override
	public void setActivityNameCurrentLanguageId(String languageId) {
		_activityNameCurrentLanguageId = languageId;
	}

	@Override
	public void setActivityNameMap(Map<Locale, String> activityNameMap) {
		setActivityNameMap(activityNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setActivityNameMap(Map<Locale, String> activityNameMap,
		Locale defaultLocale) {
		if (activityNameMap == null) {
			return;
		}

		setActivityName(LocalizationUtil.updateLocalization(activityNameMap,
				getActivityName(), "ActivityName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_classNameId = classNameId;
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_classPK = classPK;
	}

	@JSON
	@Override
	public String getClassUuid() {
		if (_classUuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _classUuid;
		}
	}

	@Override
	public void setClassUuid(String classUuid) {
		_classUuid = classUuid;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap,
				getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public int getPriority() {
		return _priority;
	}

	@Override
	public void setPriority(int priority) {
		_priority = priority;
	}

	@JSON
	@Override
	public Date getReminderDate() {
		return _reminderDate;
	}

	@Override
	public void setReminderDate(Date reminderDate) {
		_reminderDate = reminderDate;
	}

	@JSON
	@Override
	public Date getScheduledDate() {
		return _scheduledDate;
	}

	@Override
	public void setScheduledDate(Date scheduledDate) {
		_scheduledDate = scheduledDate;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public boolean getVisible() {
		return _visible;
	}

	@Override
	public boolean isVisible() {
		return _visible;
	}

	@Override
	public void setVisible(boolean visible) {
		_visible = visible;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			TMActivity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> activityNameMap = getActivityNameMap();

		for (Map.Entry<Locale, String> entry : activityNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getActivityName();

		if (xml == null) {
			return StringPool.BLANK;
		}

		return LocalizationUtil.getDefaultLanguageId(xml);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String activityName = getActivityName(defaultLocale);

		if (Validator.isNull(activityName)) {
			setActivityName(getActivityName(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setActivityName(getActivityName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(getDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public TMActivity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TMActivity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TMActivityImpl tmActivityImpl = new TMActivityImpl();

		tmActivityImpl.setActivityId(getActivityId());
		tmActivityImpl.setGroupId(getGroupId());
		tmActivityImpl.setCompanyId(getCompanyId());
		tmActivityImpl.setUserId(getUserId());
		tmActivityImpl.setUserName(getUserName());
		tmActivityImpl.setCreateDate(getCreateDate());
		tmActivityImpl.setModifiedDate(getModifiedDate());
		tmActivityImpl.setActivityName(getActivityName());
		tmActivityImpl.setClassNameId(getClassNameId());
		tmActivityImpl.setClassPK(getClassPK());
		tmActivityImpl.setClassUuid(getClassUuid());
		tmActivityImpl.setDescription(getDescription());
		tmActivityImpl.setEndDate(getEndDate());
		tmActivityImpl.setPriority(getPriority());
		tmActivityImpl.setReminderDate(getReminderDate());
		tmActivityImpl.setScheduledDate(getScheduledDate());
		tmActivityImpl.setStartDate(getStartDate());
		tmActivityImpl.setVisible(getVisible());

		tmActivityImpl.resetOriginalValues();

		return tmActivityImpl;
	}

	@Override
	public int compareTo(TMActivity tmActivity) {
		int value = 0;

		value = getActivityName().compareTo(tmActivity.getActivityName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TMActivity)) {
			return false;
		}

		TMActivity tmActivity = (TMActivity)obj;

		long primaryKey = tmActivity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TMActivityModelImpl tmActivityModelImpl = this;

		tmActivityModelImpl._originalGroupId = tmActivityModelImpl._groupId;

		tmActivityModelImpl._setOriginalGroupId = false;

		tmActivityModelImpl._originalCompanyId = tmActivityModelImpl._companyId;

		tmActivityModelImpl._setOriginalCompanyId = false;

		tmActivityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TMActivity> toCacheModel() {
		TMActivityCacheModel tmActivityCacheModel = new TMActivityCacheModel();

		tmActivityCacheModel.activityId = getActivityId();

		tmActivityCacheModel.groupId = getGroupId();

		tmActivityCacheModel.companyId = getCompanyId();

		tmActivityCacheModel.userId = getUserId();

		tmActivityCacheModel.userName = getUserName();

		String userName = tmActivityCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tmActivityCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tmActivityCacheModel.createDate = createDate.getTime();
		}
		else {
			tmActivityCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tmActivityCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			tmActivityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		tmActivityCacheModel.activityName = getActivityName();

		String activityName = tmActivityCacheModel.activityName;

		if ((activityName != null) && (activityName.length() == 0)) {
			tmActivityCacheModel.activityName = null;
		}

		tmActivityCacheModel.classNameId = getClassNameId();

		tmActivityCacheModel.classPK = getClassPK();

		tmActivityCacheModel.classUuid = getClassUuid();

		String classUuid = tmActivityCacheModel.classUuid;

		if ((classUuid != null) && (classUuid.length() == 0)) {
			tmActivityCacheModel.classUuid = null;
		}

		tmActivityCacheModel.description = getDescription();

		String description = tmActivityCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			tmActivityCacheModel.description = null;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			tmActivityCacheModel.endDate = endDate.getTime();
		}
		else {
			tmActivityCacheModel.endDate = Long.MIN_VALUE;
		}

		tmActivityCacheModel.priority = getPriority();

		Date reminderDate = getReminderDate();

		if (reminderDate != null) {
			tmActivityCacheModel.reminderDate = reminderDate.getTime();
		}
		else {
			tmActivityCacheModel.reminderDate = Long.MIN_VALUE;
		}

		Date scheduledDate = getScheduledDate();

		if (scheduledDate != null) {
			tmActivityCacheModel.scheduledDate = scheduledDate.getTime();
		}
		else {
			tmActivityCacheModel.scheduledDate = Long.MIN_VALUE;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			tmActivityCacheModel.startDate = startDate.getTime();
		}
		else {
			tmActivityCacheModel.startDate = Long.MIN_VALUE;
		}

		tmActivityCacheModel.visible = getVisible();

		return tmActivityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{activityId=");
		sb.append(getActivityId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", activityName=");
		sb.append(getActivityName());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", classUuid=");
		sb.append(getClassUuid());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append(", reminderDate=");
		sb.append(getReminderDate());
		sb.append(", scheduledDate=");
		sb.append(getScheduledDate());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", visible=");
		sb.append(getVisible());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.liferay.timemanagement.model.TMActivity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>activityId</column-name><column-value><![CDATA[");
		sb.append(getActivityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityName</column-name><column-value><![CDATA[");
		sb.append(getActivityName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classUuid</column-name><column-value><![CDATA[");
		sb.append(getClassUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reminderDate</column-name><column-value><![CDATA[");
		sb.append(getReminderDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scheduledDate</column-name><column-value><![CDATA[");
		sb.append(getScheduledDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visible</column-name><column-value><![CDATA[");
		sb.append(getVisible());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TMActivity.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TMActivity.class
		};
	private long _activityId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _activityName;
	private String _activityNameCurrentLanguageId;
	private long _classNameId;
	private long _classPK;
	private String _classUuid;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private Date _endDate;
	private int _priority;
	private Date _reminderDate;
	private Date _scheduledDate;
	private Date _startDate;
	private boolean _visible;
	private long _columnBitmask;
	private TMActivity _escapedModel;
}